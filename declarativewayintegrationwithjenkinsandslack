pipeline{

agent any

tools {
  maven 'Maven3.9.6'
}

triggers {
  pollSCM '* * * * *'
  cron '* * * * *'
}
options {
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '2', daysToKeepStr: '', numToKeepStr: '2')
  timestamps()
}

stages{

// Checkout Code Stage
stage('CheckoutCode'){
steps{

git credentialsId: '789f4102-bf6f-4cbd-b534-34772e10cd8c', url: 'https://github.com/ritishreddy/maven-web-application.git'

}
}
//Build
stage('Build'){
steps{

sh "mvn clean package"

}

}
//Execute Sonarqube Report
stage('Execute SonarQube Report'){
steps{

sh "mvn clean sonar:sonar"

}

}
//Upload artifacts into nexus

stage('Upload Artifact In Nexus'){
steps{

sh "mvn clean deploy"

}

}

//Deploy app into tomcat server

stage('Deploy app into tomcat server'){
steps{

sshagent(['1d7f8fcb-fa8f-4f72-abca-626aa36089e9']) {
 sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war   ec2-user@172.31.8.240:/opt/apache-tomcat-9.0.83/webapps/ "  
}
}

}

} //stages closing

post {
  always {
   sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  unstable {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  notBuilt {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  cleanup {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  regression {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  aborted {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  success {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  failure {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  unsuccessful {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  fixed {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
  changed {
  sendSlackNotifications(currentBuild.result)
    // One or more steps need to be included within each condition's block.
  }
}


}//Pipeline closing



def sendSlackNotifications(String buildStatus = 'STARTED') {
	  // build status of null means successful
	  buildStatus =  buildStatus ?: 'SUCCESSFUL'

	  // Default values
	  def colorName = 'RED'
	  def colorCode = '#FF0000'
	  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
	  def summary = "${subject} (${env.BUILD_URL})"

	  // Override default values based on build status
	  if (buildStatus == 'STARTED') {
	    color = 'YELLOW'
	    colorCode = '#FFFF00'
	  } else if (buildStatus == 'SUCCESSFUL') {
	    color = 'GREEN'
	    colorCode = '#00FF00'
	  } else {
	    color = 'RED'
	    colorCode = '#FF0000'
	  }

	  // Send notifications
	  slackSend (color: colorCode, message: summary, channel: "#buildnotifications1")
	}
	
